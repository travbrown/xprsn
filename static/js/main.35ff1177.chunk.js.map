{"version":3,"sources":["components/molecules/Footer.js","components/molecules/Header.js","firebase.js","components/atoms/ImgDisplay.jsx","components/molecules/Column.jsx","components/organism/Gallery.js","pages/Home.jsx","MediaContext.js","App.js","serviceWorker.js","index.js"],"names":["Footer","id","style","textAlign","marginBottom","className","iconSize","size","backgroundColor","iconColor","roundness","icon","url","width","Header","fontSize","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","ImgDisplay","imgFullPath","useState","setUrl","useEffect","ref","getDownloadURL","then","imageUrl","xhr","XMLHttpRequest","responseType","onload","event","response","open","send","img","document","getElementById","setAttribute","catch","error","console","log","getImageFromFirebase","src","Column","prop","classes","makeStyles","theme","root","flexGrow","paper","padding","spacing","color","palette","text","secondary","useStyles","columnImages","map","Paper","Gallery","folder_name","columnImage1","setColumnImage1","columnImage2","setColumnImage2","columnImage3","setColumnImage3","allImages","listAll","res","items","forEach","itemRef","push","fullPath","split_array","array","num_of_partitions","i","length","j","Math","floor","random","shuffle","slice","result","splice","ceil","splitArrayEvenly","storageListAllFiles","FormColumns","imagesPaths","Fragment","Grid","item","container","direction","justify","lg","Home","Container","initialState","fullImageFilePaths","createContext","App","exact","path","component","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.35ff1177.chunk.js","sourcesContent":["import React from 'react';\nimport {SocialMediaIconsReact} from 'social-media-icons-react';\n\nexport const Footer = () => { \n\n    return (\n        <>\n            <footer id='footer' style={{textAlign:\"center\", marginBottom:\"10px\"}}>\n                <div className=\"socialMediaLinks\">\n                    <SocialMediaIconsReact \n                    iconSize=\"6\" \n                    size=\"40\" \n                    backgroundColor=\"rgba(20,21,21,1)\" \n                    iconColor=\"rgba(255,255,255,1)\" \n                    roundness=\"50%\" \n                    icon=\"github\" \n                    url=\"https://github.com/travbrown\"/>\n                    <div style={{width:\"15px\"}}></div>\n                    \n                    <SocialMediaIconsReact \n                    iconSize=\"6\" \n                    size=\"40\" \n                    backgroundColor=\"rgba(20,21,21,1)\" \n                    iconColor=\"rgba(255,255,255,1)\" \n                    roundness=\"50%\" \n                    icon=\"instagram\" \n                    url=\"https://instagram.com/_xprsv\"/>\n                    <div style={{width:\"15px\"}}></div>\n                    \n                    <SocialMediaIconsReact \n                    iconSize=\"6\" \n                size=\"40\" \n                backgroundColor=\"rgba(20,21,21,1)\" \n                iconColor=\"rgba(255,255,255,1)\" \n                roundness=\"50%\" \n                icon=\"linkedin\" \n                url=\"https://linkedin.com/in/xprsn\"/>\n                </div>\n            </footer>\n        </>\n    );\n};","import React from 'react';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nexport const Header = () => { \n\n    return (\n        <>\n            <header className=\"App-header\">\n                <div className=\"headerContainer\">\n                    <div>XPRSV</div>\n                    <MenuIcon style={{ fontSize: 50 }}></MenuIcon>\n                </div>\n            </header>\n        </>\n    );\n};","import firebase from \"firebase/app\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCpdNMRKc0XvHuXcwtOQYTy7LaP4HYh750\",\n    authDomain: \"xprsn-58800.firebaseapp.com\",\n    projectId: \"xprsn-58800\",\n    storageBucket: \"xprsn-58800.appspot.com\",\n    messagingSenderId: \"939220999366\",\n    appId: \"1:939220999366:web:14a1579f6da98894488bc7\",\n    measurementId: \"G-T4LPBJPHY6\"\n  };\n\nfirebase.initializeApp(firebaseConfig);\nvar storage = firebase.storage();\n\n","import React, {useState, useEffect} from 'react';\nimport { storage } from \"../../firebase\";\nimport firebase from 'firebase/app';\nimport \"firebase/storage\";\n\n\nexport const ImgDisplay = (imgFullPath) => { \n    const [url, setUrl] = useState('');\n\n    useEffect(() => {\n        getImageFromFirebase(imgFullPath.imgFullPath);\n    },[]);\n\n    function getImageFromFirebase(imgFullPath){\n        const storage = firebase.storage();\n        const imgRef = storage.ref(imgFullPath);\n        imgRef.getDownloadURL()\n        .then((imageUrl) => {\n            \n            const xhr = new XMLHttpRequest();\n            xhr.responseType = 'blob';\n            xhr.onload = (event) => {\n            const blob = xhr.response;\n            };\n            xhr.open('GET', imageUrl);\n            xhr.send();\n            // Or inserted into an <img> element\n            const img = document.getElementById('myimg');\n            setUrl(imageUrl);\n            // console.log('url:',url);\n            img.setAttribute('src', imageUrl);\n        })\n        .catch((error) => {\n            // Handle any errors\n            console.log(error);\n        });\n    }\n\n    return (\n        <>\n            <img src={url}/>\n        </>\n    );\n};","import React from 'react';\nimport { ImgDisplay } from '../atoms/ImgDisplay';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\n\n\nexport function Column(prop){\n\n    const useStyles = makeStyles(theme => ({\n        root: {\n          flexGrow: 1,\n        },\n        paper: {\n          padding: theme.spacing(2),\n          textAlign: 'center',\n          color: theme.palette.text.secondary,\n        },\n      }));\n    const classes = useStyles();\n\n    return(\n        <>\n            {prop.columnImages.map(function(imgFullPath){\n                return (\n                    <Paper className={classes.paper}>\n                        <ImgDisplay imgFullPath={imgFullPath}/>\n                    </Paper>\n                );\n            })}\n        </>\n    );\n}","import React, {useState, useEffect } from 'react';\nimport { storage } from \"../../firebase\";\nimport firebase from 'firebase/app';\nimport \"firebase/storage\";\nimport { Column } from '../molecules/Column';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport function Gallery(folder_name){\n\n    const [columnImage1, setColumnImage1] = useState([]);\n    const [columnImage2, setColumnImage2] = useState([]);\n    const [columnImage3, setColumnImage3] = useState([]);\n    \n    const useStyles = makeStyles(theme => ({\n        root: {\n          flexGrow: 1,\n        },\n        paper: {\n          padding: theme.spacing(2),\n          textAlign: 'center',\n          color: theme.palette.text.secondary,\n        },\n      }));\n    const classes = useStyles();\n\n    useEffect(()=>{\n        storageListAllFiles(folder_name.folder_name);\n    },[]);\n\n    const shuffle = array => {  //this shuffles the songs and the artist pictures\n      for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n    };\n\n    function splitArrayEvenly(array, num_of_partitions) {\n        shuffle(array);\n        array = array.slice();\n      \n        let result = [];\n        while (array.length) {\n          result.push(array.splice(0, Math.ceil(array.length / num_of_partitions--)));\n        }\n        return result;\n    }\n\n/**\n * Takes in the name of a folder and retrieves the file stored in the Google firebase \n * \n * @param {*} folder_name \n * @returns allImages - an array containing all the image's full file path\n */\n    function storageListAllFiles(folder_name){\n        // Find all the prefixes and items.\n        const allImages = [];\n        const storage = firebase.storage();\n        const folderRef = storage.ref(folder_name);\n        folderRef.listAll()\n        .then((res) => {\n\n            res.items.forEach((itemRef) => {\n                allImages.push(itemRef.fullPath);\n            });\n            let split_array = splitArrayEvenly(allImages, 3)\n\n            setColumnImage1(split_array[0]);\n            setColumnImage2(split_array[1]);\n            setColumnImage3(split_array[2]);\n\n        }).catch((error) => {\n        // Uh-oh, an error occurred!\n            console.log('Getting the file paths failed --> ',error);\n        });\n    }\n\n    const FormColumns = (imagesPaths) => {\n      return (\n        <React.Fragment>\n          <Grid item>\n              <Column columnImages={imagesPaths} />\n          </Grid>\n        </React.Fragment>\n      );\n    }\n  \n    return (\n      <div className={classes.root}>\n        <Grid container direction='row' justify='center' spacing={1}>\n          <Grid container item direction='column' lg={4} spacing={2}>\n            {FormColumns(columnImage1)}\n          </Grid>\n          <Grid container item direction='column' lg={4} spacing={2}>\n            {FormColumns(columnImage2)}\n          </Grid>\n          <Grid container item direction='column' lg={4} spacing={2}>\n            {FormColumns(columnImage3)}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }","import React from 'react';\nimport { Footer } from '../components/molecules/Footer';\nimport { Header } from '../components/molecules/Header';\nimport {\n  BrowserRouter as Router,\n  Link\n} from \"react-router-dom\";\nimport '../styles/Home.css';\nimport ReactDOM from 'react-dom';\nimport GraphiQL from 'graphiql';\nimport fetch from 'isomorphic-fetch';\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {SocialMediaIconsReact} from 'social-media-icons-react';\nimport { Container } from '@material-ui/core';\nimport { Gallery } from '../components/organism/Gallery';\n\nfunction Home() {\n \n  return (\n    <Container className=\"pageContent\">\n        <Header></Header>\n\n        {/* <Body></Body> */}\n        <main>\n          <Gallery folder_name={'photography/'}/>\n        </main>\n        \n        <Footer></Footer>\n    </Container>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport {useReducer, createContext } from 'react';\nimport { storage } from \"./firebase\";\nimport firebase from 'firebase/app';\nimport \"firebase/storage\";\n\nlet initialState = {\n    fullImageFilePaths: [],\n    // mainRef: firebase.storage().ref(),\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"reset\":\n            return initialState;\n        default:\n            return state;\n    }\n};\n\nexport const MediaContext = createContext(initialState);\n\nconst MediaContextProvider = ({children}) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const reset = () => {\n        dispatch({\n            type: \"reset\",\n        });\n    };\n    \n\n    return(\n        <MediaContext.Provider value={{\n            fullImageFilePaths: state.fullImageFilePaths,\n            reset,\n        }}> {children} </MediaContext.Provider>\n    )\n};\n\nexport default MediaContextProvider;","import React from 'react';\nimport ReactFilestack from 'filestack-react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './pages/Home';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MediaContextProvider from './MediaContext';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n       <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\nimport {SocialMediaIconsReact} from 'social-media-icons-react';\n\n\n\nWebFont.load({\n  google: {\n    families: ['Raleway:700', 'sans-serif']\n  }\n});\nReactDOM.render(\n  <>\n    <SocialMediaIconsReact icon=\"linkedin\" url=\"https://linkedin.com/in/xprsn\"/>\n    <SocialMediaIconsReact icon=\"instagram\" url=\"https://instagram.com/_xprsv\"/>\n    <SocialMediaIconsReact icon=\"github\" url=\"https://github.com/travbrown\"/>\n  </>,\t\n  document.getElementById('root')\n);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}